import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Component;
import java.util.List;
import java.util.Optional;
@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserDAL userDAL;

    @Transactional
    public String createUser(User user) {
        User existingUser = userRepository.findByUsername(user.getUsername());
        if (existingUser != null) {
            return "rejected";
        } else {
            try {
                String new_user = userDAL.newUser(user.getUsername(), user.getPassword());
                if (new_user.length() == 8) {
                    return String.format("'%s' successfully created,This is the generated password,'%s'", user.getUsername(), new_user);
                } else if (new_user.equals("true")) {
                    return String.format("'%s' successfully created", user.getUsername());
                } else {
                    return new_user;
                }
            } catch (Exception e) {
                return e.getMessage();
            }
        }
    }

    public Object getUserById(String type, Long id) {
        if ("id".equals(type)) {
            return userRepository.findById(id);
        } else {
            return userDAL.getUserByIdType(type, id);
        }
    }

    public Object getQR(Long id) {
        return userDAL.getQR(id);
    }

    public Object updateUser(Long id, User user) {
        User existingUser = userRepository.findById(id);
        if (existingUser != null) {
            return userDAL.updateUser(id, user);
        } else {
            return String.format("User with ID %d does not exist", id);
        }
    }

    public String deleteAccount(Long id) {
        User existingUser = userRepository.findById(id);
        if (existingUser != null) {
            return userDAL.deleteUser(id);
        } else {
            return String.format("User with ID %d does not exist", id);
        }
    }


   
    @Service
    public class CustomerService {
    
        @Autowired
        private CustomerRepository customerRepository;
    
        @Autowired
        private CustomerDAL customerDAL;
    
        @Transactional
        public Object newCustomer(Customer customer) {
            boolean creditCheck = customerDAL.creditCheck(customer.getCreditCardNo());
            if (!creditCheck) {
                return customerRepository.save(customer);
            } else {
                return String.format("Invalid credit card number %s", customer.getCreditCardNo());
            }
        }
    
        public Object getCustomerById(Long id) {
            return customerRepository.findById(id);
        }
    
        public String updateCustomer(Long id, Customer update) {
            Customer existingCustomer = customerRepository.findById(id).orElse(null);
            if (existingCustomer != null) {
                update.setId(existingCustomer.getId());
                customerRepository.save(update);
                return String.format("%d updated successfully", id);
            } else {
                return String.format("The ID %d you specified does not exist", id);
            }
        }
    }
    
   
    
    @Service
    public class FlightService {
    
        @Autowired
        private FlightRepositoryTableFlights flightRepositoryTableFlights;
    
        @Autowired
        private TicketDAL ticketDAL;
    
        @Transactional(readOnly = true)
        public List<Flight> getAllFlights(Long id) {
            return flightRepositoryTableFlights.findAll(id);
        }
    
        @Transactional(readOnly = true)
        public Flight getFlightById(Long id) {
            return flightRepositoryTableFlights.findById(id).orElse(null);
        }
    
        @Transactional
        public Object purchaseTicket(Ticket newTicket, Boolean test) {
            Flight flight = getFlightById(newTicket.getFlightId());
            if (flight != null) {
                if (flight.getRemainingTickets() > 0) {
                    if (test == null) {
                        flightRepositoryTableFlights.updateRemainingTickets(flight.getId());
                    }
                    return ticketDAL.newTicket(newTicket);
                } else {
                    return "No tickets left";
                }
            } else {
                throw new RuntimeException("Flight does not exist");
            }
        }
    }
  

@Service
public class TicketService {

    @Autowired
    private TicketRepositoryTableTickets ticketRepositoryTableTickets;

    @Transactional(readOnly = true)
    public Ticket getTicketById(Long id) {
        return ticketRepositoryTableTickets.findById(id).orElse(null);
    }
}


@Service
public class PassengerService {

    @Autowired
    private PassengerRepositoryTablePassengers passengerRepositoryTablePassengers;

    @Transactional
    public Passenger createPassenger(Passenger passenger) {
        return passengerRepositoryTablePassengers.save(passenger);
    }
}

}
